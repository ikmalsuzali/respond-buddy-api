generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  first_name      String?           @db.VarChar
  last_name       String?           @db.VarChar
  email           String            @db.VarChar
  about_me        String?           @db.VarChar
  user_id         String?           @db.Uuid
  username        String?           @db.VarChar
  customers       customers[]
  payments        payments[]
  s3              s3[]
  store           store[]
  user_workspaces user_workspaces[]
}

model stripe_products {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripe_price_id String?         @db.VarChar
  name            String?         @db.VarChar
  description     String?         @db.VarChar
  quantity        Int?            @db.SmallInt
  key             String?         @db.VarChar
  env             String?         @db.VarChar
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  meta            Json?
  plan_type       String?         @db.VarChar
  order           Int?            @db.SmallInt
  payments        payments[]
  subscriptions   subscriptions[]
}

model gpt {
  id                    String        @id @db.Uuid
  chat_id               String?       @db.VarChar
  created_at            DateTime?     @default(now()) @db.Timestamptz(6)
  workspace_integration String?       @db.Uuid
  integrations          integrations? @relation(fields: [workspace_integration], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model integrations {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  meta_template          Json?
  rule_template          Json?
  icon                   String?                  @db.VarChar
  key                    String?                  @db.VarChar
  gpt                    gpt[]
  workspace_integrations workspace_integrations[]
}

model response {
  id                        String                  @id @db.Uuid
  workspace_integration     String?                 @db.Uuid
  message                   String?                 @db.VarChar
  gpt_response_message      String?                 @db.VarChar
  expected_response_message String?                 @db.VarChar
  is_draft                  Boolean?
  created_at                DateTime?               @default(now()) @db.Timestamptz(6)
  workspace_integrations    workspace_integrations? @relation(fields: [workspace_integration], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rule_tags {
  id                           String                        @id @db.Uuid
  workpace_integration_rule    String?                       @db.Uuid
  tag                          String?                       @db.Uuid
  created_at                   DateTime?                     @default(now()) @db.Timestamptz(6)
  tags                         tags?                         @relation(fields: [tag], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspace_integrations_rules workspace_integrations_rules? @relation(fields: [workpace_integration_rule], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  name              String?       @db.VarChar
  workspace         String?       @db.Uuid
  is_system_tag     Boolean?      @default(true)
  used_description  String?       @default("") @db.VarChar
  ai_template       String?       @db.VarChar
  key               String?       @db.VarChar
  command_type      String?       @db.VarChar
  function          String?       @db.VarChar
  base_message      Json?         @default("[]")
  is_hidden         Boolean?      @default(false)
  structured_output Json?
  workspaces        workspaces?   @relation(fields: [workspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rule_tags         rule_tags[]
  store_tags        store_tags[]
  tag_aliases       tag_aliases[]
}

model user_workspaces {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       String?     @db.Uuid
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  workspace  String?     @db.Uuid
  is_deleted Boolean?
  users      users?      @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspaces workspaces? @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model workspace_integrations {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace                    String?                        @db.Uuid
  integration                  String?                        @db.Uuid
  created_at                   DateTime?                      @default(now()) @db.Timestamptz(6)
  metadata                     Json?
  status                       String?                        @db.VarChar
  is_deleted                   Boolean?                       @default(false)
  integrations                 integrations?                  @relation(fields: [integration], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces                   workspaces?                    @relation(fields: [workspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  response                     response[]
  task_templates               task_templates[]
  tasks                        tasks[]
  workspace_integrations_rules workspace_integrations_rules[]
}

model workspace_integrations_rules {
  id                     String                  @id @db.Uuid
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  regex_type             String?                 @db.VarChar
  expected_message       String?                 @db.VarChar
  workspace_integration  String?                 @db.Uuid
  workspace_integrations workspace_integrations? @relation(fields: [workspace_integration], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rule_tags              rule_tags[]
}

model workspaces {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar
  email                  String?                  @db.VarChar
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  description            String?                  @db.VarChar
  credit_count           Int?                     @default(0)
  credit_addon_count     Int?                     @default(0)
  memory_count           Int?                     @default(0)
  memory_addon_count     Int?                     @default(0)
  chats                  chats[]
  customers              customers[]
  payments               payments[]
  s3                     s3[]
  store                  store[]
  subscriptions          subscriptions[]
  tags                   tags[]
  user_workspaces        user_workspaces[]
  workspace_integrations workspace_integrations[]
}

model tag_aliases {
  id         String    @id(map: "tag_groups_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?   @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  tag        String?   @db.Uuid
  tags       tags?     @relation(fields: [tag], references: [id], onUpdate: NoAction)
}

model task_templates {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_type              String?                 @db.VarChar
  sequence_of_functions  Json?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  is_system_generated    Boolean?                @default(false)
  workpace_integration   String?                 @db.Uuid
  meta                   Json?
  workspace_integrations workspace_integrations? @relation(fields: [workpace_integration], references: [id], onUpdate: NoAction)
  function_execution     function_execution[]
  tasks                  tasks[]
}

model tasks {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_integration  String?                 @db.Uuid
  task_template_id       String?                 @db.Uuid
  status                 String?                 @db.VarChar
  result                 Json?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  sequence_number        BigInt?
  is_system_default      Boolean?                @default(false)
  task_templates         task_templates?         @relation(fields: [task_template_id], references: [id], onUpdate: NoAction)
  workspace_integrations workspace_integrations? @relation(fields: [workspace_integration], references: [id], onUpdate: NoAction)
}

model customers {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String?     @db.VarChar
  user_alias     Json?
  created_at     DateTime?   @default(now()) @db.Timestamptz(6)
  metadata       Json?
  workspace      String?     @db.Uuid
  user           String?     @db.Uuid
  random_user_id String?     @db.Uuid
  users          users?      @relation(fields: [user], references: [id], onUpdate: NoAction)
  workspaces     workspaces? @relation(fields: [workspace], references: [id], onUpdate: NoAction)
  messages       messages[]
}

model store {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  output_text  String?      @db.VarChar
  metadata     Json?
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  workspace    String?      @db.Uuid
  type         String?      @db.VarChar
  raw_s3_url   String?      @db.VarChar
  gpt_s3_url   String?      @db.VarChar
  hash         String?      @db.VarChar
  redis_key    String?      @db.VarChar
  created_by   String?      @db.Uuid
  s3           String?      @db.Uuid
  store_type   String?      @db.Uuid
  status       String?      @db.VarChar
  users        users?       @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  s3_s3Tostore s3?          @relation(fields: [s3], references: [id], onUpdate: NoAction)
  store_types  store_types? @relation(fields: [store_type], references: [id], onUpdate: NoAction)
  workspaces   workspaces?  @relation(fields: [workspace], references: [id], onUpdate: NoAction)
  messages     messages[]
  store_tags   store_tags[]
}

model store_tags {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store                   String?   @db.Uuid
  tag                     String?   @db.Uuid
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  store_storeTostore_tags store?    @relation(fields: [store], references: [id], onUpdate: NoAction)
  tags                    tags?     @relation(fields: [tag], references: [id], onUpdate: NoAction)
}

model store_types {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?   @db.VarChar
  fields     Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  slug       String?   @unique
  icon       String?   @db.VarChar
  is_deleted Boolean?  @default(false)
  store      store[]
}

model s3 {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  original_name String?     @db.VarChar
  s3_name       String?     @db.VarChar
  s3_url        String?     @db.VarChar
  created_at    DateTime?   @default(now()) @db.Timestamptz(6)
  created_by    String?     @db.Uuid
  workspace     String?     @db.Uuid
  file_size     Float?
  users         users?      @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  workspaces    workspaces? @relation(fields: [workspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  store         store[]
}

model messages {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at            DateTime?  @default(now()) @db.Timestamptz(6)
  store                 String?    @db.Uuid
  content               String?    @db.VarChar
  gpt_message           String?    @db.VarChar
  status                String?    @db.VarChar
  original_message      String?    @db.Uuid
  type                  String?    @db.VarChar
  customer              String?    @db.Uuid
  chat                  String?    @db.Uuid
  chats                 chats?     @relation(fields: [chat], references: [id], onUpdate: NoAction)
  customers             customers? @relation(fields: [customer], references: [id], onUpdate: NoAction)
  messages              messages?  @relation("messagesTomessages", fields: [original_message], references: [id], onUpdate: NoAction)
  store_messagesTostore store?     @relation(fields: [store], references: [id], onUpdate: NoAction)
  other_messages        messages[] @relation("messagesTomessages")
}

model subscription_add_ons {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription     String?        @db.Uuid
  stripe_add_on_id String?        @db.VarChar
  name             String?        @db.VarChar
  price            Int?
  created_at       DateTime       @default(now()) @db.Timestamptz(6)
  subscriptions    subscriptions? @relation(fields: [subscription], references: [id], onUpdate: NoAction)
}

model subscriptions {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace              String?                @db.Uuid
  stripe_subscription_id String?                @db.VarChar
  created_at             DateTime               @default(now()) @db.Timestamptz(6)
  stripe_product         String?                @db.Uuid
  next_renewal_date      DateTime?              @db.Timestamptz(6)
  is_deleted             Boolean?               @default(false)
  remarks                String?                @db.VarChar
  stripe_products        stripe_products?       @relation(fields: [stripe_product], references: [id], onUpdate: NoAction)
  workspaces             workspaces?            @relation(fields: [workspace], references: [id], onUpdate: NoAction)
  subscription_add_ons   subscription_add_ons[]
}

model payments {
  id                       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                   Int?             @default(0) @db.SmallInt
  created_at               DateTime         @default(now()) @db.Timestamptz(6)
  workspace                String?          @db.Uuid
  quantity                 Int?
  start_date               DateTime?        @db.Timestamptz(6)
  end_date                 DateTime?        @db.Timestamptz(6)
  stripe_product           String?          @db.Uuid
  receipt_url              String?
  stripe_payment_intent_id String?
  user                     String?          @db.Uuid
  stripe_products          stripe_products? @relation(fields: [stripe_product], references: [id], onUpdate: NoAction)
  users                    users?           @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces               workspaces?      @relation(fields: [workspace], references: [id], onUpdate: NoAction)
}

model function_execution {
  id              BigInt          @id @default(autoincrement())
  template        String?         @db.Uuid
  function_name   String?         @db.VarChar
  result          String?         @db.VarChar
  iteration_level BigInt?
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  task_templates  task_templates? @relation(fields: [template], references: [id], onUpdate: NoAction)
}

model chats {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace  String?     @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  workspaces workspaces? @relation(fields: [workspace], references: [id], onUpdate: NoAction)
  messages   messages[]
}
