generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  first_name      String?           @db.VarChar
  last_name       String?           @db.VarChar
  email           String            @db.VarChar
  about_me        String?           @db.VarChar
  user_id         String?           @db.Uuid
  username        String?           @db.VarChar
  user_workspaces user_workspaces[]
}

model stripe_products {
  id              String    @id @db.Uuid
  stripe_price_id String?   @db.VarChar
  name            String?   @db.VarChar
  description     String?   @db.VarChar
  quantity        Int?      @db.SmallInt
  key             String?   @db.VarChar
  env             String?   @db.VarChar
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
}

model gpt {
  id                    String        @id @db.Uuid
  chat_id               String?       @db.VarChar
  created_at            DateTime?     @default(now()) @db.Timestamptz(6)
  workspace_integration String?       @db.Uuid
  integrations          integrations? @relation(fields: [workspace_integration], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model integrations {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  meta_template          Json?
  rule_template          Json?
  gpt                    gpt[]
  workspace_integrations workspace_integrations[]
}

model response {
  id                        String                  @id @db.Uuid
  workspace_integration     String?                 @db.Uuid
  message                   String?                 @db.VarChar
  gpt_response_message      String?                 @db.VarChar
  expected_response_message String?                 @db.VarChar
  is_draft                  Boolean?
  created_at                DateTime?               @default(now()) @db.Timestamptz(6)
  workspace_integrations    workspace_integrations? @relation(fields: [workspace_integration], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model rule_tags {
  id                           String                        @id @db.Uuid
  workpace_integration_rule    String?                       @db.Uuid
  tag                          String?                       @db.Uuid
  created_at                   DateTime?                     @default(now()) @db.Timestamptz(6)
  tags                         tags?                         @relation(fields: [tag], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspace_integrations_rules workspace_integrations_rules? @relation(fields: [workpace_integration_rule], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tags {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime?     @default(now()) @db.Timestamptz(6)
  name                String?       @db.VarChar
  workspace           String?       @db.Uuid
  is_system_tag       Boolean?      @default(true)
  description         String?       @default("") @db.VarChar
  ai_default_response String?       @db.VarChar
  workspaces          workspaces?   @relation(fields: [workspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rule_tags           rule_tags[]
  store_tags          store_tags[]
  tag_aliases         tag_aliases[]
}

model user_workspaces {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       String?     @db.Uuid
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  workspace  String?     @db.Uuid
  is_deleted Boolean?
  users      users?      @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspaces workspaces? @relation(fields: [workspace], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model workspace_integrations {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace                    String?                        @db.Uuid
  integration                  String?                        @db.Uuid
  created_at                   DateTime?                      @default(now()) @db.Timestamptz(6)
  metadata                     Json?
  status                       String?                        @db.VarChar
  integrations                 integrations?                  @relation(fields: [integration], references: [id], onDelete: NoAction, onUpdate: NoAction)
  workspaces                   workspaces?                    @relation(fields: [workspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  response                     response[]
  task_templates               task_templates[]
  tasks                        tasks[]
  workspace_integrations_rules workspace_integrations_rules[]
}

model workspace_integrations_rules {
  id                     String                  @id @db.Uuid
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  regex_type             String?                 @db.VarChar
  expected_message       String?                 @db.VarChar
  workspace_integration  String?                 @db.Uuid
  workspace_integrations workspace_integrations? @relation(fields: [workspace_integration], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rule_tags              rule_tags[]
}

model workspaces {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String?                  @db.VarChar
  email                  String?                  @db.VarChar
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  description            String?                  @db.VarChar
  customers              customers[]
  store                  store[]
  tags                   tags[]
  user_workspaces        user_workspaces[]
  workspace_integrations workspace_integrations[]
}

model tag_aliases {
  id         String    @id(map: "tag_groups_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?   @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  tag        String?   @db.Uuid
  tags       tags?     @relation(fields: [tag], references: [id], onUpdate: NoAction)
}

model task_templates {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task_type              String?                 @db.VarChar
  task_data              Json?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  is_system_generated    Boolean?                @default(false)
  workpace_integration   String?                 @db.Uuid
  workspace_integrations workspace_integrations? @relation(fields: [workpace_integration], references: [id], onUpdate: NoAction)
  tasks                  tasks[]
}

model tasks {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_integration  String?                 @db.Uuid
  task_template_id       String?                 @db.Uuid
  status                 String?                 @db.VarChar
  result                 Json?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  sequence_number        BigInt?
  is_system_default      Boolean?                @default(false)
  task_templates         task_templates?         @relation(fields: [task_template_id], references: [id], onUpdate: NoAction)
  workspace_integrations workspace_integrations? @relation(fields: [workspace_integration], references: [id], onUpdate: NoAction)
}

model customers {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String?     @db.VarChar
  user_alias Json?
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  metadata   Json?
  workspace  String?     @db.Uuid
  workspaces workspaces? @relation(fields: [workspace], references: [id], onUpdate: NoAction)
}

model store {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  output_text String?      @db.VarChar
  metadata    Json?
  created_at  DateTime?    @default(now()) @db.Timestamptz(6)
  workspace   String?      @db.Uuid
  type        String?      @db.VarChar
  raw_s3_url  String?      @db.VarChar
  gpt_s3_url  String?      @db.VarChar
  workspaces  workspaces?  @relation(fields: [workspace], references: [id], onUpdate: NoAction)
  store_tags  store_tags[]
}

model store_tags {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store                   String?   @db.Uuid
  tag                     String?   @db.Uuid
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  store_storeTostore_tags store?    @relation(fields: [store], references: [id], onUpdate: NoAction)
  tags                    tags?     @relation(fields: [tag], references: [id], onUpdate: NoAction)
}

model store_types {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?   @db.VarChar
  fields     Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  slug       String?   @unique
}
